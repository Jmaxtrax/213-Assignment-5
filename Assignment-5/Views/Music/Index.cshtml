@model IEnumerable<Assignment_5.Models.Music>

@{
	ViewData["Title"] = "Index";
}

<h1>Browse Music</h1>

<form id="filterForm">
	<label for="genre">Select Genre:</label>
	<select id="genre" name="genre">
		<option value="">All Genres</option>
		@foreach (var genre in Model.Select(item => item.Genre).Distinct())
		{
			<option value="@genre">@genre</option>
		}
	</select>

	<label for="performer">Select Performer:</label>
	<select id="performer" name="performer">
		<option value="">All Performers</option>
		@foreach (var performer in Model.Select(item => item.Performer).Where(p => !string.IsNullOrEmpty(p)).Distinct())
		{
			<option va lue="@performer">@performer</option>
		}
	</select>

	<button type="submit">Search</button>
	<button id="addToCartBtn" onclick="addToShoppingCart()">Add to Shopping Cart</button>
</form>

<table class="table">
	<thead>
		<tr>
			<th>
				Title
			</th>
			<th>
				Genre
			</th>
			<th>
				Performer
			</th>
			<th>
				Price
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody id="musicTableBody">

		<!-- This tbody will be dynamically populated based on user selection -->
	</tbody>
</table>

<script>

	document.getElementById('filterForm').addEventListener('submit', function (event) {
		event.preventDefault();
		var selectedGenre = document.getElementById('genre').value;
		var selectedPerformer = document.getElementById('performer').value;
		fetchMusicItems(selectedGenre, selectedPerformer);
	});

	function fetchMusicItems(genre, performer) {
		var url = '/Music/GetMusicItemsByGenre?';

		// Add the genre parameter to the URL if a genre is selected
		url += genre ? 'genre=' + encodeURIComponent(genre) : '';

		// Add the performer parameter to the URL only if a performer is selected
		url += performer ? (genre ? '&' : '') + 'performer=' + encodeURIComponent(performer) : '';

		fetch(url)
			.then(response => response.json())
			.then(data => {
				var tableBody = document.getElementById('musicTableBody');
				tableBody.innerHTML = '';

				data.forEach(item => {
					var row = document.createElement('tr');
					row.innerHTML = `
									<td>${item.title}</td>
									<td>${item.genre}</td>
									<td>${item.performer}</td>
									<td>${item.price}</td>
									<td><input type="checkbox" class="song-checkbox" data-song-id="${item.id}" /></td>
								`;
					tableBody.appendChild(row);
				});
			})
			.catch(error => console.error('Error:', error));
	}

</script>

<script>
	// Function to handle adding selected songs to the shopping cart
	function addToShoppingCart() {
		var selectedSongs = [];

		// Find all checked checkboxes
		var checkboxes = document.querySelectorAll('.song-checkbox:checked');
		checkboxes.forEach(function (checkbox) {
			selectedSongs.push(checkbox.dataset.songId);
		});

		// Make an AJAX request to add selected songs to the shopping cart
		// Modify the URL and other details based on your project structure
		fetch('/ShoppingCart/AddToCart', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(selectedSongs)
		})
			.then(response => response.json())
			.then(data => {
				// Handle the response, update UI, etc.
				console.log('Songs added to shopping cart:', data);
			})
			.catch(error => console.error('Error:', error));
	}
</script>

<script>
	// Function to fetch music items on page load
	(function fetchMusicOnLoad() {
		// You can provide default values for genre and performer here
		var defaultGenre = ''; // Set the default genre
		var defaultPerformer = ''; // Set the default performer

		// Call the fetchMusicItems function with default values
		fetchMusicItems(defaultGenre, defaultPerformer);
	})();

</script>